generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Voter {
  voter_id  Int     @id @unique @default(autoincrement())
  name      String
  age       Int
  has_voted Boolean

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  votes            Vote[]
  rankedBallots    RankedBallot[]
  encryptedBallots EncryptedBallot[]

  @@map("voter")
}

model Candidate {
  candidate_id Int    @id @unique @default(autoincrement())
  name         String
  party        String
  votes_count  Int    @default(0)

  votes          Vote[]
  ballotRankings BallotRanking[]

  @@map("candidate")
}

model Vote {
  vote_id      Int @id @unique @default(autoincrement())
  voter_id     Int
  candidate_id Int
  weight       Int @default(1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  voter     Voter     @relation(fields: [voter_id], references: [voter_id])
  candidate Candidate @relation(fields: [candidate_id], references: [candidate_id])

  @@map("votes")
}

// ==================== New Models ====================

model RankedBallot {
  ballot_id   String   @id
  election_id String
  voter_id    Int
  timestamp   DateTime
  status      String   @default("accepted")

  voter    Voter           @relation(fields: [voter_id], references: [voter_id])
  rankings BallotRanking[]

  @@map("ranked_ballots")
}

model BallotRanking {
  id            Int    @id @default(autoincrement())
  ballot_id     String
  candidate_id  Int
  rank_position Int

  ballot    RankedBallot @relation(fields: [ballot_id], references: [ballot_id], onDelete: Cascade)
  candidate Candidate    @relation(fields: [candidate_id], references: [candidate_id])

  @@map("ballot_rankings")
}

model EncryptedBallot {
  ballot_id    String   @id
  election_id  String
  voter_id     Int
  ciphertext   String
  zk_proof     String
  voter_pubkey String
  nullifier    String   @unique
  signature    String
  status       String   @default("accepted")
  anchored_at  DateTime @default(now())

  voter Voter @relation(fields: [voter_id], references: [voter_id])

  @@map("encrypted_ballots")
}
