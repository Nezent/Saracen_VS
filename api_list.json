[
  {
    "id": "Q1",
    "title": "Create Voter",
    "method": "POST",
    "endpoint": "/api/voters",
    "description": "Register a new voter with unique ID, name, and age validation (minimum 18 years).",
    "request_body": { "voter_id": 1, "name": "Alice", "age": 22 },
    "success": {
      "status": "218 Created",
      "body": { "voter_id": 1, "name": "Alice", "age": 22, "has_voted": false }
    },
    "error_responses": [
      { "status": "409 Conflict", "body": { "message": "voter with id: 1 already exists" } }
    ]
  },
  {
    "id": "Q2",
    "title": "Get Voter Info",
    "method": "GET",
    "endpoint": "/api/voters/{voter_id}",
    "description": "Retrieve detailed information about a specific voter by ID.",
    "request_body": null,
    "success": {
      "status": "222 Found",
      "body": { "voter_id": 1, "name": "Alice", "age": 22, "has_voted": false }
    },
    "error_responses": [
      { "status": "417 Expectation Failed", "body": { "message": "voter with id: 5 was not found" } }
    ]
  },
  {
    "id": "Q3",
    "title": "List All Voters",
    "method": "GET",
    "endpoint": "/api/voters",
    "description": "Retrieve a complete list of all registered voters.",
    "request_body": null,
    "success": {
      "status": "223 Listed",
      "body": {
        "voters": [
          { "voter_id": 1, "name": "Alice", "age": 22 },
          { "voter_id": 2, "name": "Bob", "age": 30 }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q4",
    "title": "Update Voter Info",
    "method": "PUT",
    "endpoint": "/api/voters/{voter_id}",
    "description": "Update existing voter information with age validation (minimum 18 years).",
    "request_body": null,
    "success": {
      "status": "224 Updated",
      "body": { "voter_id": 1, "name": "Alice Smith", "age": 25, "has_voted": false }
    },
    "error_responses": [
      { "status": "422 Unprocessable Entity", "body": { "message": "invalid age: 16, must be 18 or older" } }
    ]
  },
  {
    "id": "Q5",
    "title": "Delete Voter",
    "method": "DELETE",
    "endpoint": "/api/voters/{voter_id}",
    "description": "Remove a voter from the system.",
    "request_body": null,
    "success": {
      "status": "225 Deleted",
      "body": { "message": "voter with id: 1 deleted successfully" }
    },
    "error_responses": []
  },
  {
    "id": "Q6",
    "title": "Register Candidate",
    "method": "POST",
    "endpoint": "/api/candidates",
    "description": "Register a new candidate for the election.",
    "request_body": { "candidate_id": 1, "name": "John Doe", "party": "Green Party" },
    "success": {
      "status": "226 Registered",
      "body": { "candidate_id": 1, "name": "John Doe", "party": "Green Party", "votes": 0 }
    },
    "error_responses": []
  },
  {
    "id": "Q7",
    "title": "List Candidates",
    "method": "GET",
    "endpoint": "/api/candidates",
    "description": "Get all registered candidates.",
    "request_body": null,
    "success": {
      "status": "227 Listed",
      "body": {
        "candidates": [
          { "candidate_id": 1, "name": "John Doe", "party": "Green Party" },
          { "candidate_id": 2, "name": "Jane Roe", "party": "Red Party" }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q8",
    "title": "Cast Vote",
    "method": "POST",
    "endpoint": "/api/votes",
    "description": "Cast a vote for a candidate with validation to prevent duplicate voting.",
    "request_body": { "voter_id": 1, "candidate_id": 2 },
    "success": {
      "status": "228 Voted",
      "body": { "vote_id": 101, "voter_id": 1, "candidate_id": 2, "timestamp": "2025-09-10T10:30:00Z" }
    },
    "error_responses": [
      { "status": "423 Locked", "body": { "message": "voter with id: 1 has already voted" } }
    ]
  },
  {
    "id": "Q9",
    "title": "Get Candidate Votes",
    "method": "GET",
    "endpoint": "/api/candidates/{candidate_id}/votes",
    "description": "Get the vote count for a specific candidate.",
    "request_body": null,
    "success": { "status": "229 Counted", "body": { "candidate_id": 2, "votes": 45 } },
    "error_responses": []
  },
  {
    "id": "Q10",
    "title": "Filter Candidates by Party",
    "method": "GET",
    "endpoint": "/api/candidates?party={party_name}",
    "description": "Filter candidates by political party.",
    "request_body": null,
    "success": {
      "status": "230 Filtered",
      "body": {
        "candidates": [
          { "candidate_id": 1, "name": "John Doe", "party": "Green Party" }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q11",
    "title": "Voting Results (Leaderboard)",
    "method": "GET",
    "endpoint": "/api/results",
    "description": "Get the complete voting results with candidates ranked by vote count.",
    "request_body": null,
    "success": {
      "status": "231 Results",
      "body": {
        "results": [
          { "candidate_id": 2, "name": "Jane Roe", "votes": 45 },
          { "candidate_id": 1, "name": "John Doe", "votes": 30 }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q12",
    "title": "Winning Candidate",
    "method": "GET",
    "endpoint": "/api/results/winner",
    "description": "Get the winning candidate(s), handling ties appropriately.",
    "request_body": null,
    "success": {
      "status": "232 Winner",
      "body": {
        "winners": [
          { "candidate_id": 1, "name": "John Doe", "votes": 40 },
          { "candidate_id": 2, "name": "Jane Roe", "votes": 40 }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q13",
    "title": "Vote Timeline",
    "method": "GET",
    "endpoint": "/api/votes/timeline?candidate_id={id}",
    "description": "Get the timeline of votes for a specific candidate.",
    "request_body": null,
    "success": {
      "status": "233 Timeline",
      "body": {
        "candidate_id": 2,
        "timeline": [
          { "vote_id": 101, "timestamp": "2025-09-10T10:30:00Z" },
          { "vote_id": 102, "timestamp": "2025-09-10T10:32:00Z" }
        ]
      }
    },
    "error_responses": []
  },
  {
    "id": "Q14",
    "title": "Conditional Vote Weight",
    "method": "POST",
    "endpoint": "/api/votes/weighted",
    "description": "Cast a weighted vote based on voter profile update status.",
    "request_body": { "voter_id": 1, "candidate_id": 2 },
    "success": {
      "status": "234 Weighted",
      "body": { "vote_id": 201, "voter_id": 1, "candidate_id": 2, "weight": 2 }
    },
    "error_responses": []
  },
  {
    "id": "Q15",
    "title": "Range Vote Queries",
    "method": "GET",
    "endpoint": "/api/votes/range?candidate_id={id}&from={t1}&to={t2}",
    "description": "Get votes for a candidate within a specific time range.",
    "request_body": null,
    "success": {
      "status": "235 Range",
      "body": {
        "candidate_id": 2,
        "from": "2025-09-10T10:00:00Z",
        "to": "2025-09-10T12:00:00Z",
        "votes_gained": 42
      }
    },
    "error_responses": [
      { "status": "424 Failed Dependency", "body": { "message": "invalid interval: from > to" } }
    ]
  },
  {
    "id": "Q16",
    "title": "End-to-End Verifiable Encrypted Ballot",
    "method": "POST",
    "endpoint": "/api/ballots/encrypted",
    "description": "Accept encrypted ballots with zero-knowledge proofs and nullifiers to prevent double voting.",
    "request_body": {
      "election_id": "nat-2025",
      "ciphertext": "base64(Paillier_or_ElGamal_cipher)",
      "zk_proof": "base64(Groth16_or_Plonk_proof)",
      "voter_pubkey": "hex(P-256)",
      "nullifier": "hex(keccak256(signal))",
      "signature": "base64(Ed25519 signature over payload)"
    },
    "success": {
      "status": "236 Encrypted",
      "body": {
        "ballot_id": "b_7f8c",
        "status": "accepted",
        "nullifier": "0x4a1e.",
        "anchored_at": "2025-09-15T08:30:00Z"
      }
    },
    "error_responses": [
      { "status": "425 Too Early", "body": { "message": "invalid zk proof" } }
    ]
  },
  {
    "id": "Q17",
    "title": "Homomorphic Tally With Verifiable Decryption",
    "method": "POST",
    "endpoint": "/api/results/homomorphic",
    "description": "Tally encrypted ballots without decryption and publish verifiable results.",
    "request_body": {
      "election_id": "nat-2025",
      "trustee_decrypt_shares": [
        { "trustee_id": "T1", "share": "base64(.)", "proof": "base64(NIZK)" },
        { "trustee_id": "T3", "share": "base64(.)", "proof": "base64(NIZK)" },
        { "trustee_id": "T5", "share": "base64(.)", "proof": "base64(NIZK)" }
      ]
    },
    "success": {
      "status": "237 Tallied",
      "body": {
        "election_id": "nat-2025",
        "encrypted_tally_root": "0x9ab3.",
        "candidate_tallies": [
          { "candidate_id": 1, "votes": 40321 },
          { "candidate_id": 2, "votes": 39997 }
        ],
        "decryption_proof": "base64(batch_proof_linking_cipher_aggregate_to_plain_counts)",
        "transparency": {
          "ballot_merkle_root": "0x5d2c.",
          "tally_method": "threshold_paillier",
          "threshold": "3-of-5"
        }
      }
    },
    "error_responses": []
  },
  {
    "id": "Q18",
    "title": "Differential-Privacy Analytics",
    "method": "POST",
    "endpoint": "/api/analytics/dp",
    "description": "Permit aggregate queries with differential privacy noise and budget tracking.",
    "request_body": {
      "election_id": "nat-2025",
      "query": {
        "type": "histogram",
        "dimension": "voter_age_bucket",
        "buckets": ["18-24", "25-34", "35-44", "45-64", "65+"],
        "filter": { "has_voted": true }
      },
      "epsilon": 0.5,
      "delta": 1e-6
    },
    "success": {
      "status": "238 Private",
      "body": {
        "answer": {
          "18-24": 10450,
          "25-34": 20110,
          "35-44": 18001,
          "45-64": 17320,
          "65+": 9022
        },
        "noise_mechanism": "gaussian",
        "epsilon_spent": 0.5,
        "delta": 1e-6,
        "remaining_privacy_budget": { "epsilon": 1.0, "delta": 1e-6 },
        "composition_method": "advanced_composition"
      }
    },
    "error_responses": []
  },
  {
    "id": "Q19",
    "title": "Ranked-Choice / Condorcet (Schulze)",
    "method": "POST",
    "endpoint": "/api/ballots/ranked",
    "description": "Submit ranked ballots and compute Schulze winner(s) with full audit trail.",
    "request_body": {
      "election_id": "city-rcv-2025",
      "voter_id": 123,
      "ranking": [3, 1, 2, 5, 4],
      "timestamp": "2025-09-10T10:15:00Z"
    },
    "success": { "status": "239 Ranked", "body": { "ballot_id": "rb_2219", "status": "accepted" } },
    "error_responses": []
  },
  {
    "id": "Q20",
    "title": "Risk-Limiting Audit (RLA)",
    "method": "POST",
    "endpoint": "/api/audits/plan",
    "description": "Produce ballot-polling audit plan with Kaplan-Markov sequential test.",
    "request_body": {
      "election_id": "nat-2025",
      "reported_tallies": [
        { "candidate_id": 1, "votes": 40321 },
        { "candidate_id": 2, "votes": 39997 }
      ],
      "risk_limit_alpha": 0.05,
      "audit_type": "ballot_polling",
      "stratification": { "counties": ["A", "B", "C"] }
    },
    "success": {
      "status": "240 Audited",
      "body": {
        "audit_id": "rla_88a1",
        "initial_sample_size": 1200,
        "sampling_plan": "base64(csv of county proportions and random seeds)",
        "test": "kaplan-markov",
        "status": "planned"
      }
    },
    "error_responses": []
  }
]
